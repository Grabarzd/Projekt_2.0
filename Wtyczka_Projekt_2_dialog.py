# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Projekt2Dialog
                                 A QGIS plugin
 01000110 01100001 01101010 01101110 01111001 00100000 01110100 01100101 01101110 00100000 01110000 01110010 01101111 01101010 01100101 01101011 01110100 00100000 01110100 01100001 01101011 01101001 00100000 01101110 01101001 01100101 00100000 01111010 01100001 00100000 11000101 10000010 01100001 01110100 01110111 01111001 00101100 00100000 01101110 01101001 01100101 00100000 01111010 01100001 00100000 01110100 01110010 01110101 01100100 01101110 01111001
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-31
        git sha              : $Format:%H$
        copyright            : (C) 2023 by DS, MR, KP 
        email                : 1
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from PyQt5.QtWidgets import QFileDialog
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtGui import QColor
from qgis.core import QgsProject, QgsGeometry, QgsVectorLayer, QgsFeature, QgsField, QgsFields, QgsPointXY, QgsCoordinateTransform, QgsCoordinateReferenceSystem
from PyQt5.QtCore import QVariant
import csv
from qgis.gui import QgsVertexMarker
from qgis.PyQt.QtWidgets import QApplication

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Wtyczka_Projekt_2_dialog_base.ui'))


class Projekt2Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Projekt2Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_calculate.clicked.connect(self.option)
        self.pushButton_clear.clicked.connect(self.clear)
        self.pushButton_add_file.clicked.connect(self.add_file)
        self.pushButton_add_table.clicked.connect(self.table)
        iface.messageBar().pushSuccess( 'Succes:',f'Thanks for choosing our plugin' )
    
    def table(self):
        self.tableWidget.setColumnWidth(0,100)
        self.tableWidget.setColumnWidth(1,100)
        self.tableWidget.setColumnWidth(2,100)
        self.tableWidget.setColumnWidth(3,100)
        self.tableWidget.setHorizontalHeaderLabels(['Number','X','Y','Z'])
        layer = self.mMapLayerComboBox_layers.currentLayer()
        choosen = layer.selectedFeatures()
        choosen = sorted(choosen, key=lambda f: f['id'])
        self.tableWidget.setRowCount(len(choosen)+12)
        self.tableWidget.setColumnCount(4)
        i=0
        while i<(len(choosen)):
            id=str((choosen[i].attributes())[0])
            Y=str((choosen[i].attributes())[1])
            X=str((choosen[i].attributes())[2])
            Z=str((choosen[i].attributes())[3])
            self.tableWidget.setItem(i,0,QtWidgets.QTableWidgetItem(id))
            self.tableWidget.setItem(i,1,QtWidgets.QTableWidgetItem(X))
            self.tableWidget.setItem(i,2,QtWidgets.QTableWidgetItem(Y))
            self.tableWidget.setItem(i,3,QtWidgets.QTableWidgetItem(Z))
            i=i+1
        iface.messageBar().pushSuccess( 'Succes:',f'Added date to table' )

    def clear(self):
        self.label_score.setText('')
        self.label_description_of_score.setText('')
        self.label_number_of_points.setText('')
        self.label_filepath.setText('')
        i=0
        while i<19:
            empty=''
            self.tableWidget.setItem(i,0,QtWidgets.QTableWidgetItem(empty))
            self.tableWidget.setItem(i,1,QtWidgets.QTableWidgetItem(empty))
            self.tableWidget.setItem(i,2,QtWidgets.QTableWidgetItem(empty))
            self.tableWidget.setItem(i,3,QtWidgets.QTableWidgetItem(empty))
            i=i+1
        self.label_filepath_2.setText('')
        iface.messageBar().pushInfo('Clear','Console cleaning performed correctly')

    def add_file(self):
        if self.mRasterBandComboBox_systems.currentText()=='PL1992':
            crs='EPSG:2180'
        elif self.mRasterBandComboBox_systems.currentText()=='PL2000 - Zone 5':
            crs='EPSG:2176'
        elif self.mRasterBandComboBox_systems.currentText()=='PL2000 - Zone 6':
            crs='EPSG:2177'
        elif self.mRasterBandComboBox_systems.currentText()=='PL2000 - Zone 7':
            crs='EPSG:2178'
        elif self.mRasterBandComboBox_systems.currentText()=='PL2000 - Zone 8':
            crs='EPSG:2179'
        file_path = QFileDialog.getOpenFileName(self, 'Open file')[0]
        try:
            self.label_filepath.setText(f'{file_path}')
            layer_name = 'Punkty'
            fields = QgsFields()
            fields.append(QgsField('ID', QVariant.Double))
            fields.append(QgsField('X', QVariant.Double))
            fields.append(QgsField('Y', QVariant.Double))   
            fields.append(QgsField('Z', QVariant.Double))
            layer = QgsVectorLayer('Point?crs=' + crs, layer_name, 'memory')
            provider = layer.dataProvider()
            provider.addAttributes(fields)
            layer.updateFields()
            self.label_filepath.setText('Choosen filepath:')
            self.label_filepath_2.setText(f'{file_path}')
        
            
            if self.radioButton_txt.isChecked():
                with open(file_path, 'r') as file:
                    csv_reader = csv.reader(file, delimiter=' ')
                    next(csv_reader)
                    i=0
                    for row in csv_reader:
                        y = float(row[0])
                        x = float(row[1])
                        z = float(row[2])
                        i=i+1
                        point = QgsPointXY(x, y)
                        feature = QgsFeature()
                        feature.setGeometry(QgsGeometry.fromPointXY(point))
                        feature.setAttributes([str(i),x, y, z])
                        provider.addFeature(feature)
            elif self.radioButton_csv.isChecked():
                with open(file_path, 'r') as file:
                    csv_reader = csv.reader(file, delimiter=',')
                    next(csv_reader)
                    for row in csv_reader:
                        if len(row) >= 4:
                            id = row[0]
                            y = float(row[1])
                            x = float(row[2])
                            z = float(row[3])
                            point = QgsPointXY(x, y)
                            feature = QgsFeature()
                            feature.setGeometry(QgsGeometry.fromPointXY(point))
                            feature.setAttributes([str(id), x, y, z])
                            provider.addFeature(feature)
            layer.updateExtents()
            QgsProject.instance().addMapLayer(layer)
            iface.messageBar().pushSuccess( 'Succes:',f'Added file {file_path}' )
        except FileNotFoundError:
            self.label_filepath.setText('File not selected!')

    def option(self):
        if self.radioButton_height.isChecked():
            layer = iface.activeLayer()
            choosen = layer.selectedFeatures()
            choosen = sorted(choosen, key=lambda f: f['id'])
            i=0
            if len(choosen)==0 or len(choosen)==1:
                    iface.messageBar().pushMessage('Please choose more points')   
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Critical)
                    msg.setText("                     Error                    ")
                    msg.setInformativeText('Option requires at least two points')
                    msg.exec_()
            else:
                while i<=(len(choosen)-1):
                    if choosen[0].attributes()[0]==choosen[i].attributes()[0]:
                        ''
                    else:
                        delta_h=float((choosen[i].attributes())[3])-float((choosen[0].attributes())[3])
                        iface.messageBar().pushMessage(f'the difference between points {choosen[0].attributes()[0]} and {choosen[i].attributes()[0]} is {delta_h:.3f} m')
                    i=i+1
            iface.messageBar().pushSuccess( 'Succes','Action performed successfully' )
            self.label_score.setText('Result is in the command line') 


        elif self.radioButton_area.isChecked():
            layer = iface.activeLayer()
            choosen = layer.selectedFeatures()
            choosen = sorted(choosen, key=lambda f: f['id'])
            area=0
            i=0
            if len(choosen)<3:
                iface.messageBar().pushMessage('Please choose more points')   
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("                     Error                    ")
                msg.setInformativeText('Option requires at least two points')
                msg.exec_()
            else:   
                while i<=(len(choosen)-1):
                    if choosen[i]==choosen[0]:
                        last_x=float((choosen[-1].attributes())[1])
                        area=area+(float((choosen[1].attributes())[1])-last_x)*float((choosen[0].attributes())[2])
                    elif choosen[i]==choosen[-1]:
                        first_x=float((choosen[0].attributes())[1])
                        area=area+(first_x-float((choosen[-1].attributes())[1]))*float((choosen[-1].attributes())[2])
                    else:
                        delta_x=float((choosen[i+1].attributes())[1])-float((choosen[i-1].attributes())[1])
                        area=area+delta_x*float((choosen[i].attributes())[2])
                    i=i+1
                    if area<0:
                        area=area*-1
                    self.label_description_of_score.setText('Area of the designated area is')
                if self.radioButtona_meters.isChecked():
                    self.label_score.setText(f'{(area/2):.3f} m')
                elif self.radioButtona_ares.isChecked():
                    self.label_score.setText(f'{(area/200):.2f} a')
                elif self.radioButtona_hectares.isChecked():
                    self.label_score.setText(f'{(area/20000):.4f} ha')
                else:
                    self.label_description_of_score.setText('')
                    self.label_score.setText('')
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Critical)
                    msg.setText("                     Error                    ")
                    msg.setInformativeText('You have to select units of area!!!')
                    msg.exec_()
            iface.messageBar().pushSuccess( 'Succes','Action performed successfully' )

        if self.radioButton_polygon.isChecked():
            if self.mRasterBandComboBox_systems.currentText()=='PL1992':
                crs='EPSG:2180'
            elif self.mRasterBandComboBox_systems.currentText()=='PL2000 - Zone 5':
                crs='EPSG:2176'
            elif self.mRasterBandComboBox_systems.currentText()=='PL2000 - Zone 6':
                crs='EPSG:2177'
            elif self.mRasterBandComboBox_systems.currentText()=='PL2000 - Zone 7':
                crs='EPSG:2178'
            elif self.mRasterBandComboBox_systems.currentText()=='PL2000 - Zone 8':
                crs='EPSG:2179'
            selected_features = iface.activeLayer().selectedFeatures()
            new_layer = QgsVectorLayer("Polygon?crs="+crs, "Poligon", "memory")
            provider = new_layer.dataProvider()
            fields = provider.fields()
            new_layer.startEditing()
            selected_features_sorted = sorted(selected_features, key=lambda f: f['id'])
            polygon_points = []
            for feature in selected_features_sorted:
                geom = feature.geometry()
                polygon_points.append(geom.asPoint())
            polygon = QgsGeometry.fromPolygonXY([polygon_points])
            new_feature = QgsFeature()
            new_feature.setGeometry(polygon)
            new_layer.addFeature(new_feature)
            new_layer.commitChanges()
            QgsProject.instance().addMapLayer(new_layer)
            iface.messageBar().pushSuccess( 'Succes','Action performed successfully' )

        selected_features=self.mMapLayerComboBox_layers.currentLayer().selectedFeatures()
        number_of_selected_elements=len(selected_features)
        self.label_number_of_points.setText(f'{number_of_selected_elements}')








